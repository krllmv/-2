1) Перед началом работы в репозитории необходимо выполнить следующую команду:
	git branch develop
2) Работа с веткой feature
	a) Для создания ветки feature используйте следующую команду:
		git flow-feature-start
	б) После окончания работы с веткой feature используйте следующую команду:
		git fow-feature-finish
3) Работа с веткой release
	а) Для создания ветки release используйте следующую коману:
		git flow-release-start
	б) После окончания работы с веткой release используйте следующую команду:
		git flow-release-finish
4) Работа с веткой hotfix
	а) Для создания ветки hotfix используйте следующую коману:
		git flow-hotfix-start
	б) После окончания работы с веткой hotfix используйте следующую команду:
		git flow-hotfix-finish
5) Работа с новым проектом
	Для добавления удаленного репозитория используйте следующую команду:
		git remote add <shortname> <url>
	<shortname> - короткое имя, по которому Вы будете обращаться к данному репозиторию
	<url> - адрес
6) Получение изменений из удаленного репозитория
	Для получения изменений введите следующую команду:
		git fetch <remote-name>
	<remote-name> - короткое имя, которое Вы дали репозиторию
7) Отправление изменений в удаленный репозиторий
	Для отправки изменений в удаленный репозиторий используйте следующую команду:
		git push <remote-name> <branch-name>
	<remote-name> - короткое имя удаленного репозитория
	<branch-name> - имя ветки, которую Вы хотите отправить
8) Теги
	При работе с ветками master, hotfix и release следуйте следующим правилам
	оставления тегов и коммитов:
		а) При каждом вызове git flow-release-finish или flow-hotfix-finish 
		   оставляйте тег новой версии, использую следующую команду:
			git tag -a v.№.№. -m "your comment"
		   №.№. каждый раз надо увеличивать, показывая, что это более новая версия.
		б) При каждом вызове git flow-release-start в первом коммите указывайте, что
		   это начало работы с версией №(номер версии).
		в) При каждом вызове git flow-hotfix-start в коммите указывайте с какой
		   версией идет работа